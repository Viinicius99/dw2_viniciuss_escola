// Configura√ß√£o espec√≠fica para Live Server
// Este arquivo deve ser carregado ANTES do script.js principal

console.log('üîß Configura√ß√£o Live Server carregada');
console.log('üåê Porta atual:', window.location.port);
console.log('üîó Protocolo:', window.location.protocol);

// For√ßar API_URL para backend quando no Live Server
if (window.location.port === '5500') {
    console.log('üì° Live Server detectado - configurando backend');
    localStorage.setItem('API_URL', 'http://127.0.0.1:8005');
    
    // Adicionar fun√ß√£o de teste de conectividade
    window.testarBackend = async function() {
        try {
            console.log('üß™ Testando conex√£o com backend...');
            const response = await fetch('http://127.0.0.1:8005/health');
            if (response.ok) {
                const data = await response.json();
                console.log('‚úÖ Backend OK:', data);
                return true;
            } else {
                console.log('‚ùå Backend n√£o responde:', response.status);
                return false;
            }
        } catch (error) {
            console.log('‚ùå Erro ao conectar backend:', error.message);
            return false;
        }
    };
    
    // Apenas testar conectividade sem recarregar automaticamente
    setTimeout(() => {
        window.testarBackend().then(ok => {
            if (ok) {
                console.log('üéâ Backend dispon√≠vel!');
            } else {
                console.log('‚ö†Ô∏è Backend n√£o dispon√≠vel. Execute: python backend/app.py');
            }
        });
    }, 1000);
}